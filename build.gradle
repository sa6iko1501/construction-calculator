import com.avast.gradle.dockercompose.tasks.ComposeDown
import com.avast.gradle.dockercompose.tasks.ComposeUp

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0-SNAPSHOT'
	id 'com.avast.gradle.docker-compose' version '0.17.6'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'org.sonarqube' version "4.4.1.3373"
	id 'jacoco'
}

group = 'com.turboproductions'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	implementation 'org.apache.poi:poi-ooxml:5.2.5'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.11.0'
	testImplementation 'org.springframework.security:spring-security-test'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

spotless {
	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**'
		}
		googleJavaFormat()
		licenseHeader '/* Construction Calculator - Alexander Stoyanov! 2024 */'
	}
}

sonar {
	properties {
		property "sonar.projectKey", sonarProjectKey
		property "sonar.organization", sonarOrganization
		property "sonar.host.url", sonarHost
		property 'sonar.branch', sonarBranch
	}
}

dockerCompose {
	useComposeFiles = ['docker-compose.yml']
	startedServices = ['sqlserver']
	stopContainers = true
	removeContainers = true
	removeVolumes = true
	removeOrphans = true
	forceRecreate = true
	waitForTcpPorts = true
}

tasks.register('startDataBase', ComposeUp) {
	dependsOn composeUp
}

tasks.register('stopDataBase', ComposeDown) {
	dependsOn composeDown
}

tasks.register('useDatabase') {
	dependsOn startDatabase
	finalizedBy stopDatabase
}

tasks.register('createDataBase') {
	dependsOn(composeUp)
	doLast {
		def username = "sa"
		def password = "c@lcUl@tor"
		def database = "calc"
		def command = "docker exec sqlServer /opt/mssql-tools/bin/sqlcmd -S localhost -U $username -P $password -Q \"IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = '$database') CREATE DATABASE $database\""
		exec {
			commandLine 'cmd', '/c', command
		}
	}
}

tasks.register('runDatabaseTask') {
	dependsOn createDataBase
}



tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(jacocoTestReport)
}

jacocoTestReport{
	reports {
		xml.required = true
	}
	dependsOn(test)
}
